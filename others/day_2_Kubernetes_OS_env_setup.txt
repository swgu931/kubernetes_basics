■ Kubernetes OS 환경 구성

$sudo apt-get install selinux-utils
$setenforce 0   # SELinux is disabled

$sudo apt-get install policycoreutils
$sestatus

$vi /etc/selinux/config
  SELINUX=permissive로 변경
$sestatus:
$systemctl stop firewalld
$systemctl disable firewalld
$systemctl list-unit-files | grep firewall

$swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab


[root@k8s-master ~]# cat <<EOF >  /etc/sysctl.d/k8s.conf
> net.bridge.bridge-nf-call-ip6tables = 1
> net.bridge.bridge-nf-call-iptables = 1
> EOF

[root@k8s-master ~]# sysctl --system

[root@k8s-master ~]# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
> [kubernetes]
> name=Kubernetes
> baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
> enabled=1
> gpgcheck=1
> repo_gpgcheck=1
> gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg 
> https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
> EOF

[root@k8s-master ~]# yum update

[root@k8s-master ~]# cd /etc/yum.repos.d/
[root@k8s-master yum.repos.d]# vi Daum.repo

[base]
name=CentOS-$releasever - Base
baseurl=http://ftp.daumkakao.com/centos/$releasever/os/$basearch/
gpgcheck=0
[updates]
name=CentOS-$releasever - Updates
baseurl=http://ftp.daumkakao.com/centos/$releasever/updates/$basearch/
gpgcheck=0
[extras]
name=CentOS-$releasever - Extras
baseurl=http://ftp.daumkakao.com/centos/$releasever/extras/$basearch/
gpgcheck=0

[root@k8s-master ~]# yum install -y yum-utils device-mapper-persistent-data lvm2

[root@k8s-master ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

[root@k8s-master ~]# yum -y install docker-ce-18.06.2.ce

[root@k8s-master ~]# mkdir /etc/docker
[root@k8s-master ~]# cat > /etc/docker/daemon.json <<EOF
> {
>   "exec-opts": ["native.cgroupdriver=systemd"],
>   "log-driver": "json-file",
>   "log-opts": {
>     "max-size": "100m"
>   },
>   "storage-driver": "overlay2",
>   "storage-opts": [
>     "overlay2.override_kernel_check=true"
>   ]
> }
> EOF

[root@k8s-master ~]# systemctl daemon-reload

[root@k8s-master ~]# systemctl enable --now docker

# kubernetes install
[root@k8s-master ~]# yum install -y --disableexcludes=kubernetes kubeadm-1.15.5-0.x86_64 kubectl-1.15.5-0.x86_64 kubelet-1.15.5-0.x86_64 

[root@k8s-master ~]# systemctl enable --now kubelet

------------------------------------------- Master 구성 END ----------------------

> linux poweroff
> c:\k8s-master\ 모든 파일을 복사
> c:\k8s-node1
> c:\k8s-node2

[root@k8s-master ~]# hostnamectl set-hostname k8s-node1
[root@k8s-master ~]# hostnamectl set-hostname k8s-node2



-- 마지막 설정
◇ node1,2 설치

# master vm image 복사하여 node1,2 구성 후 boot

================================================



[root@k8s-master ~]# hostnamectl set-hostname k8s-node1
[root@k8s-node1 ~]# cat /etc/hostname
[root@k8s-node1 ~]# ifconfig
[root@k8s-node1 ~]# vi /etc/hostname
192.168.20.135  k8s-master
192.168.20.140  k8s-node1
192.168.20.137  k8s-node2

-- 접속 테스트
[root@k8s-master ~]# ssh k8s-node1
[root@k8s-master ~]# ping 192.168.20.137

[root@k8s-master ~]# hostnamectl set-hostname k8s-node2
[root@k8s-node2 ~]# cat /etc/hosts
[root@k8s-node2 ~]# ifconfig


my ip)
192.168.182.128 k8s-master
192.168.182.129 k8s-node1
192.168.182.130 k8s-node2


-- kubenetes 초기화(init)
[root@k8s-master ~]# kubeadm init
error execution phase preflight: [preflight] Some fatal errors occurred:
        [ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1

[root@k8s-master ~]# cat /proc/sys/net/ipv4/ip_forward
0
[root@k8s-master ~]# echo '1' > /proc/sys/net/ipv4/ip_forward
[root@k8s-master ~]# cat /proc/sys/net/ipv4/ip_forward
1
[root@k8s-master ~]# kubeadm init
---
kubeadm join 192.168.182.128:6443 --token o0ut0j.53ualf5d70elbmtv \
--discovery-token-ca-cert-hash sha256:20ae57dbcd2a3f2fbe5b8080d4d9538060feb18ac173dbbbce6bc8d1847829ad 
----

[root@k8s-master ~]# mkdir -p $HOME/.kube
[root@k8s-master ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
[root@k8s-master ~]# chown $(id -u):$(id -g) $HOME/.kube/config

[root@k8s-master ~]# curl -O https://docs.projectcalico.org/v3.9/manifests/calico.yaml

[root@k8s-master ~]# kubectl apply -f calico.yaml


# calico와 coredns 관련 Pod의 Status가 Running인지 확인
[root@k8s-master ~]# kubectl get pods --all-namespaces
NAMESPACE     NAME                                       READY   STATUS              RESTARTS   AGE
kube-system   calico-kube-controllers-597f7d96bd-qtjx5   0/1     ContainerCreating   0          49s
kube-system   calico-node-c76p6                          0/1     Init:2/3            0          49s
kube-system   calico-node-dfhf4                          0/1     Init:2/3            0          49s
kube-system   calico-node-ffmhx                          0/1     Init:1/3            0          49s
kube-system   coredns-5c98db65d4-28xxs                   0/1     ContainerCreating   0          10m
kube-system   coredns-5c98db65d4-ml54s                   0/1     ContainerCreating   0          10m
kube-system   etcd-k8s-master                            1/1     Running             0          9m5s

-- dashboard plugin
[root@k8s-master ~]# kubectl apply -f https://raw.githubusercontent.com/kubetm/kubetm.github.io/master/sample/practice/appendix/gcp-kubernetes-dashboard.yaml

-- node1~node2 수행
[root@k8s-node1 ~]# echo '1' > /proc/sys/net/ipv4/ip_forward
[root@k8s-node1 ~]# kubeadm join 192.168.20.135:6443 --token eelo4m.g54hzbcwy9clex0a --discovery-token-ca-cert-hash sha256:135fa8ca76cc42ee36937721ed417288cfe2abddfd43d5768b25c61adcf08f83

-- master 에서..
[root@k8s-master ~]# kubectl get nodes
NAME         STATUS   ROLES    AGE    VERSION
k8s-master   Ready    master   15m    v1.15.5
k8s-node1    Ready    <none>   106s   v1.15.5
k8s-node2    Ready    <none>   66s    v1.15.5

[root@k8s-master ~]# kubectl get nodes -o wide
NAME         STATUS   ROLES    AGE     VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION          CONTAINER-RUNTIME
k8s-master   Ready    master   18m     v1.15.5   192.168.20.135   <none>        CentOS Linux 7 (Core)   3.10.0-693.el7.x86_64   docker://18.6.2
k8s-node1    Ready    <none>   4m38s   v1.15.5   192.168.20.140   <none>        CentOS Linux 7 (Core)   3.10.0-693.el7.x86_64   docker://18.6.2
k8s-node2    Ready    <none>   3m58s   v1.15.5   192.168.20.137   <none>        CentOS Linux 7 (Core)   3.10.0-693.el7.x86_64   docker://18.6.2



[root@k8s-master ~]# nohup kubectl proxy --port=8001 --address=192.168.20.135 --accept-hosts='^*$' /dev/null 2>&1 &
[1] 92597

[root@k8s-master ~]# netstat -nlp | grep 8001
tcp        0      0 192.168.20.135:8001     0.0.0.0:*               LISTEN      92597/kubectl

http://192.168.20.135:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/


-- 대시보드 로그
[root@k8s-master ~]# kubectl get pods --all-namespaces
…
kube-system   kubernetes-dashboard-6b8c96cf8c-z4rgw      1/1     Running   0          34m

[root@k8s-master ~]# kubectl -n kube-system logs -f kubernetes-dashboard-6b8c96cf8c-z4rgw

[root@k8s-master ~]# kubectl describe nodes

-- 재설정
[root@k8s-master ~]# kubeadm reset
[root@k8s-node1 ~]# kubeadm reset
[root@k8s-node2 ~]# kubeadm reset
[root@k8s-master ~]# systemctl restart kubelet
[root@k8s-node1 ~]# systemctl restart kubelet
[root@k8s-node2 ~]# systemctl restart kubelet


-- dashboard 삭제
[root@k8s-master ~]# kubectl delete pod -n kube-system kubernetes-dashboard-6b8c96cf8c-9n55b


-- GCP dashboard

1) yaml apply

kubectl apply -f https://raw.githubusercontent.com/kubetm/kubetm.github.io/master/sample/practice/appendix/gcp-kubernetes-dashboard.yaml 

Or 

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml
(refered from : https://kubernetes.io/ko/docs/tasks/access-application-cluster/web-ui-dashboard/)

2) Token 생성 (아래 사이트 참조)
  https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md


2) proxy 실행
kubectl proxy

3) 접속

-- 접속
http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/pod?namespace=default
 
위에서 생성한 토큰 입력






